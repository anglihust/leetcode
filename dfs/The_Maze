//dfs method
class Solution {
public:
    bool hasPath(vector<vector<int>>& maze, vector<int>& start, vector<int>& destination) {
        vector<vector<bool>> visited(maze.size(),vector<bool>(maze[0].size(),false));
        vector<pair<int,int>> dir={{-1,0},{1,0},{0,-1},{0,1}};
        return dfs(destination,dir,maze,start[0],start[1],visited);
    }
    
    bool dfs(vector<int> destination,vector<pair<int,int>> dir,vector<vector<int>> maze,int curx, int cury,vector<vector<bool>> &visited){
        if(curx==destination[0] and cury==destination[1]) return true;
        for(int i=0;i<4;i++){
            int dirx = dir[i].first;
            int diry = dir[i].second;
            int nx = curx;
            int ny = cury;
            while(nx+dirx>=0 and nx+dirx<maze.size() and ny+diry>=0 and ny+diry<maze[0].size() and !maze[nx+dirx][ny+diry]){
                nx+=dirx;
                ny+=diry;
            }
            if(visited[nx][ny]) continue;
            visited[nx][ny]=true;
            if(dfs(destination,dir,maze,nx,ny,visited)) return true;
        }
        return false;
    }
};

//again,same
class Solution {
public:
    bool hasPath(vector<vector<int>>& maze, vector<int>& start, vector<int>& destination) {
        vector<pair<int,int>> dir ={{0,1},{0,-1},{1,0},{-1,0}};
        vector<vector<int>> visited(maze.size(),vector<int>(maze[0].size(),0));
        return dfs(maze,start,destination,visited,dir);
    }
    
    bool dfs(vector<vector<int>> maze, vector<int> start, vector<int> destination, vector<vector<int>> &visited,vector<pair<int,int>> dir){
        if(start==destination) return true;
        for(int i=0;i<4;i++){
            int cur_x = start[0];
            int cur_y = start[1];
            int dir_x =dir[i].first;
            int dir_y =dir[i].second;
            while(dir_x+cur_x>=0 and cur_x+dir_x<maze.size() and dir_y+cur_y>=0 and cur_y+dir_y<maze[0].size() and !maze[dir_x+cur_x][dir_y+cur_y]){
                cur_x+=dir_x;
                cur_y+=dir_y;
            }
            if(visited[cur_x][cur_y]) continue;
            visited[cur_x][cur_y]=true;
            if(dfs(maze,{cur_x,cur_y},destination,visited,dir)) return true;
        }
        return false;
    }
};
